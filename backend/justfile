AWS_ACCOUNT_ID := "031421732210"
AWS_REGION := "eu-west-1"
ECR_URL := AWS_ACCOUNT_ID + ".dkr.ecr." + AWS_REGION + ".amazonaws.com"
ECR_REPO_NAME := "pdf-chat-api"
VERSION := `git rev-parse --short HEAD`

export PYTHONPATH := "."

init:
    poetry install 

run:
    poetry run python main.py

lint-check:
    poetry run isort . --check-only --diff
    poetry run black --check --diff .

lint-fix:
    poetry run isort . && poetry run black .

test-unit:
    poetry run pytest -W ignore::DeprecationWarning . --ignore=tests/integration/

test-integration:
    poetry run pytest -W ignore::DeprecationWarning . --ignore=tests/unit/

clean:
    rm -rf .pytest_cache 
    find . -type d -name "__pycache__" -exec rm -rf {} +

serve-local:
    poetry run python -m debug

# Upload the Bitcoin whitepaper
upload-bitcoin:
    curl -X POST "http://0.0.0.0:8000/prod/upload" \
        -H "Content-Type: multipart/form-data" \
        -F "file=@docs/Bitcoin - A Peer-to-Peer Electronic Cash System.pdf" \
        -F "session_id=123"

# Query the API with a custom message
query message:
    curl -X POST "http://0.0.0.0:8000/prod/query" \
        -H "Content-Type: application/json" \
        -d "{\"query\": \"{{message}}\", \"session_id\": \"123\", \"chat_history\": []}"

# Example quick query about the paper
query-paper:
    curl -X POST "http://0.0.0.0:8000/prod/query" \
        -H "Content-Type: application/json" \
        -d "{\"query\": \"What is this paper about?\", \"session_id\": \"123\", \"chat_history\": []}"

query-paper-with-history:
    curl -X POST "http://0.0.0.0:8000/prod/query" \
        -H "Content-Type: application/json" \
        -d "{\"query\": \"What did we talk about in our chat history?\", \"session_id\": \"123\", \"chat_history\": [{\"role\": \"user\", \"content\": \"What color is the sky ?\"}, {\"role\": \"assistant\", \"content\": \"the sky is blue.\"}]}"

# Start the FastAPI server with correct PYTHONPATH
serve:
    PYTHONPATH=. poetry run python routers/router.py


# ECR
ecr-login:
    aws ecr get-login-password --region {{AWS_REGION}} | docker login --username AWS --password-stdin {{AWS_ACCOUNT_ID}}.dkr.ecr.{{AWS_REGION}}.amazonaws.com

ecr-get-latest-image-tag:
    aws ecr describe-images \
        --repository-name {{ECR_REPO_NAME}} \
        --query 'sort_by(imageDetails,& imagePushedAt)[-1].imageTags[0]' \
        --filter tagStatus=TAGGED \
        --output text

ecr-get-latest-image:
    LATEST_IMAGE=$(just ecr-get-latest-image-tag) && \
    echo {{ECR_URL}}/{{ECR_REPO_NAME}}:$LATEST_IMAGE

ecr-push-lambda:
    just ecr-login
    docker push {{ECR_URL}}/{{ECR_REPO_NAME}}:{{VERSION}}


# Docker
docker-build-lambda:
    docker buildx build --platform linux/arm64 \
        --load \
        -t {{ECR_URL}}/{{ECR_REPO_NAME}}:{{VERSION}} .


docker-up:
    docker compose up -d

docker-down:
    docker compose down


# Lambda
lambda-deploy:
    just ecr-login
    LATEST_IMAGE=$(just ecr-get-latest-image-tag) && \
    aws lambda update-function-code \
        --function-name pdf-chat-api \
        --image-uri {{AWS_ACCOUNT_ID}}.dkr.ecr.{{AWS_REGION}}.amazonaws.com/{{ECR_REPO_NAME}}:$LATEST_IMAGE

ci-build-and-push:
    just docker-build-lambda
    just docker-push-lambda

# Vector store
db-login-local:
    docker exec -it backend-db-1 psql -U postgres -d pdf_chat
