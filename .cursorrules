# Classes 
 - Classes should be concise and represent a single responsibility. Use meaningful, descriptive names.
 - Classes should be simple, so avoid using complex hierarchies and rely on composition over inheritance.

# Functions 
 - Functions should be concise and represent a single responsibility. Use meaningful, descriptive names.
 - Aim for 20 lines or fewer.

# Docstring / Comments 
 - Avoid over-commenting; write self-explanatory code.

# Coding Style
 - Avoid premature optimization; prioritize readability and maintainability.

# Testing 
- Write unit tests for all new code.
- Use descriptive names for test cases, in the format of "test_<function_name>_<scenario>_<expected_output>"
- Use mocking sparingly; prefer real instances unless dependencies are heavy or external.
- Organize tests in a `/tests` directory mirroring the project structure.
- Tests should be structured using GIVEN, WHEN, THEN or ARRANGE, ACT, ASSERT 
- Tests should assert the the expected output